
1. Libraries and Dependencies
	•	csv: Used to save the generated data into CSV files.
	•	random.uniform: Generates random latitude and longitude within a specified radius.
	•	math (Haversine Formula): Calculates the great-circle distance between two points on Earth using their latitudes and longitudes.
	•	pandas: Converts the matrix dictionaries into tabular format and exports them as CSV files.

2. Functions

2.1. generate_coordinates
	•	Purpose: Creates random geographic coordinates (latitude and longitude) around a given center.
	•	Parameters:
	•	n: Number of coordinates to generate.
	•	center_lat, center_lon: Central location’s latitude and longitude.
	•	radius: Range within which the coordinates are generated.
	•	How It Works:
	•	For each of n locations, random latitude and longitude are generated by adding/subtracting a random value within the radius.
	•	These coordinates are rounded to 6 decimal places for precision.

2.2. haversine
	•	Purpose: Calculates the distance in kilometers between two geographical points using the Haversine formula.
	•	Parameters:
	•	lat1, lon1: Latitude and longitude of the first point.
	•	lat2, lon2: Latitude and longitude of the second point.
	•	Formula:
￼
￼
￼
Where ￼ km (Earth’s radius).

3. Data Generation

3.1. generate_coordinates
	•	Warehouses:
	•	Generates 2 warehouses around center_lat = 34.73483 and center_lon = 135.43452 within a radius of 0.5 degrees.
	•	Destinations:
	•	Generates 4 destinations around the same center but with a larger radius of 1.0 degrees.

4. Matrix Generation

Function: generate_matrices

This function creates three matrices:
	1.	Destination vs Destination:
	•	Compares each destination with every other destination.
	•	Distance and cost are calculated for unique pairs (e.g., D1 → D2, but not D2 → D1 to avoid duplicates).
	•	Stored in a nested dictionary:

destination_vs_destination[dest1["id"]][dest2["id"]] = (distance, cost)


	2.	Warehouse vs Warehouse:
	•	Compares each warehouse with every other warehouse.
	•	Similar to the destination matrix, duplicates are avoided.
	3.	Warehouse vs Destination:
	•	Compares each warehouse with all destinations.
	•	Since warehouses and destinations are distinct, no duplicates occur.

5. Matrix Export

Function: save_matrix_to_csv
	•	Purpose: Converts the matrices into CSV files for readability and sharing.
	•	How It Works:
	•	The nested dictionary for each matrix is converted into a Pandas DataFrame using pd.DataFrame.from_dict.
	•	Rows and columns are labeled for clarity.
	•	The DataFrame is saved as a CSV file with appropriate headers.

6. Output Files

The code generates the following CSV files:
	1.	destination_vs_destination.csv:
	•	Rows and columns represent destinations.
	•	Each cell contains a tuple (distance, cost).
	2.	warehouse_vs_warehouse.csv:
	•	Rows and columns represent warehouses.
	•	Each cell contains a tuple (distance, cost).
	3.	warehouse_vs_destination.csv:
	•	Rows represent warehouses, and columns represent destinations.
	•	Each cell contains a tuple (distance, cost).

Example Data

For 2 Warehouses and 4 Destinations:

destination_vs_destination.csv:

Destination	D1	D2	D3	D4
D1	(0, 0)	(12.3, 61.5)	(8.7, 43.5)	(15.2, 76.0)
D2	(12.3, 61.5)	(0, 0)	(5.4, 27.0)	(9.1, 45.5)
…	…	…	…	…

warehouse_vs_warehouse.csv:

Warehouse	W1	W2
W1	(0, 0)	(10.2, 51.0)
W2	(10.2, 51.0)	(0, 0)

warehouse_vs_destination.csv:

Warehouse	D1	D2	D3	D4
W1	(14.5, 72.5)	(8.2, 41.0)	(5.6, 28.0)	(12.3, 61.5)
W2	(7.1, 35.5)	(10.8, 54.0)	(3.9, 19.5)	(9.5, 47.5)

Summary
	•	Coordinates:
	•	Randomly generated locations for warehouses and destinations.
	•	Distances and Costs:
	•	Calculated using the Haversine formula and a linear cost function.
	•	Matrices:
	•	Represent relationships between destinations and warehouses.
	•	CSV Files:
	•	Provide a structured representation for analysis and visualization.

